// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserType {
  USER
  SAMPLE
  SYSTEM
}

enum UserRole {
  USER
  ADMIN
}

enum Locale {
  en
  es
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  type          UserType    @default(USER)
  role          UserRole    @default(USER)
  locale        Locale      @default(en)
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  createdAt         DateTime    @default(now())
  createdById       String?
  updatedAt         DateTime    @updatedAt
  updatedById       String?
  createdBy     User?      @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?     @relation("UserUpdatedBy", fields: [updatedById], references: [id])

  accounts Account[]
  sessions Session[]
  assets   Asset[]   @relation(name: "AssetAssignedTo")

  createdAssets Asset[] @relation(name: "AssetCreatedBy")
  updatedAssets Asset[] @relation(name: "AssetUpdatedBy")
  createdUsers  User[]  @relation(name: "UserCreatedBy")
  updatedUsers  User[]  @relation(name: "UserUpdatedBy")
  createdTickets  Ticket[] @relation("TicketCreatedBy")
  updatedTickets  Ticket[] @relation("TicketUpdatedBy")

  // --- Helpdesk Relations ---
  teams         Team[]    @relation("TeamMembers")
  assignedTickets Ticket[] @relation("TicketAgent")
  comments        Comment[] @relation("CommentAuthor")
  notes           Note[]    @relation("NoteAuthor")
  // --- End Helpdesk Relations ---
}

model Department {
  id   String @id @default(cuid())
  name String @unique

  users User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AssetType {
  HARDWARE
  SOFTWARE
  SAAS
  OTHER
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  DECOMMISSIONED
}

model Asset {
  id                String      @id @default(cuid())
  type              AssetType
  subtype           String?
  name              String
  vendor            String?
  identifier        String?
  model             String?
  serialNumber      String?
  purchaseAt        DateTime?
  warrantyExpiresAt DateTime?
  status            AssetStatus
  assignedToId      String?
  customFields      Json?
  createdAt         DateTime    @default(now())
  createdById       String
  updatedAt         DateTime    @updatedAt
  updatedById       String?
  deletedAt         DateTime?

  createdBy  User  @relation(name: "AssetCreatedBy", fields: [createdById], references: [id])
  updatedBy  User? @relation(name: "AssetUpdatedBy", fields: [updatedById], references: [id])
  assignedTo User? @relation(name: "AssetAssignedTo", fields: [assignedToId], references: [id])
  // TODO: tags
  // TODO: location
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Team {
  id    String  @id @default(cuid())
  name  String  @unique
  users User[]  @relation("TeamMembers")
  tickets Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String        @id @default(cuid())
  title       String
  description String
  priority    TicketPriority
  status      TicketStatus  @default(OPEN)
  closedAt    DateTime?
  dueAt       DateTime?

  // Assignment (either agent or team)
  agentId     String?
  agent       User?         @relation("TicketAgent", fields: [agentId], references: [id])
  teamId      String?
  team        Team?         @relation(fields: [teamId], references: [id])

  createdAt         DateTime    @default(now())
  createdById       String
  updatedAt         DateTime    @updatedAt
  updatedById       String?
  deletedAt         DateTime?

  createdBy  User  @relation(name: "TicketCreatedBy", fields: [createdById], references: [id])
  updatedBy  User? @relation(name: "TicketUpdatedBy", fields: [updatedById], references: [id])

  // Comments and Notes
  comments    Comment[]
  notes       Note[]

  // Indexes for search/filter
  @@index([status, priority, agentId, teamId, createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  authorId  String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  isInternal Boolean @default(false) // false: public comment
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  authorId  String
  author    User     @relation("NoteAuthor", fields: [authorId], references: [id])
}
